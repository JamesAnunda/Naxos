{"ast":null,"code":"var _jsxFileName = \"/Users/kirkhoey/Desktop/myapp/src/App.js\";\nimport React, { Component } from 'react';\nimport { Router, navigate } from '@reach/router';\nimport Firebase, { auth } from './Firebase';\nimport './App.css';\nimport Login from './Login';\nimport Home from './Home';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faHeartbeat, faSpinner } from '@fortawesome/free-solid-svg-icons';\nlibrary.add(faHeartbeat, faSpinner);\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.writeUserData = (userId, name, email, imageUrl) => {\n      Firebase.database().ref('users/' + userId).set({\n        username: name,\n        email: email,\n        profile_picture: imageUrl\n      });\n    };\n\n    this.addMeeting = meetingName => {\n      const ref = Firebase.database().ref(\"meetings/\".concat(this.state.user.uid));\n      ref.push({\n        meetingName: meetingName\n      });\n    };\n\n    this.state = {\n      user: null,\n      phone: \"+15555555555\",\n      lat: null,\n      lng: null\n    };\n    this.authPhone = this.authPhone.bind(this);\n  }\n\n  componentDidMount() {\n    auth.onAuthStateChanged(user => {\n      if (user) {\n        this.setState({\n          user\n        });\n        console.log('logged in');\n        console.log(user.uid);\n        navigate('/home');\n      } else {\n        console.log('logged out');\n        navigate('/');\n      }\n    });\n    auth.setPersistence(Firebase.auth.Auth.Persistence.NONE).then(function () {// Existing and future Auth states are now persisted in the current\n      // session only. Closing the window would clear any existing state even\n      // if a user forgets to sign out.\n      // ...\n      // New sign-in will be persisted with session persistence.\n      //return Firebase.auth().signInWithEmailAndPassword(email, password);\n    }).catch(function (error) {\n      // Handle Errors here.\n      var errorCode = error.code;\n      var errorMessage = error.message;\n    });\n  }\n\n  authPhone() {\n    const phoneNumber = this.state.phone;\n    const appVerifier = window.recaptchaVerifier;\n    Firebase.auth().signInWithPhoneNumber(phoneNumber, appVerifier).then(confirmResult => {\n      console.log(\"success\");\n      console.log(confirmResult); // success\n      //var code = getCodeFromUserInput();\n\n      var code = \"123463\";\n      confirmResult.confirm(code).then(function (result) {\n        // User signed in successfully.\n        var user = result.user;\n        console.log(user); // ...\n      }).catch(function (error) {\n        // User couldn't sign in (bad verification code?)\n        // ...\n        console.log(error);\n      });\n    }).catch(error => {\n      // error\n      console.log('nope error');\n      console.log(error);\n    });\n  }\n\n  authAnon() {\n    Firebase.auth().signInAnonymously().catch(function (error) {\n      // Handle Errors here.\n      var errorCode = error.code;\n      var errorMessage = error.message; // ...\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(Router, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(Login, {\n      path: \"/\",\n      authAnon: this.authAnon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), React.createElement(Home, {\n      path: \"/home\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: this.getLocation(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"Get Location\"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/kirkhoey/Desktop/myapp/src/App.js"],"names":["React","Component","Router","navigate","Firebase","auth","Login","Home","library","FontAwesomeIcon","faHeartbeat","faSpinner","add","App","constructor","writeUserData","userId","name","email","imageUrl","database","ref","set","username","profile_picture","addMeeting","meetingName","state","user","uid","push","phone","lat","lng","authPhone","bind","componentDidMount","onAuthStateChanged","setState","console","log","setPersistence","Auth","Persistence","NONE","then","catch","error","errorCode","code","errorMessage","message","phoneNumber","appVerifier","window","recaptchaVerifier","signInWithPhoneNumber","confirmResult","confirm","result","authAnon","signInAnonymously","render","getLocation"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { Router, navigate } from '@reach/router';\nimport Firebase, {auth} from './Firebase';\nimport './App.css';\n\nimport Login from './Login';\nimport Home from './Home';\n\n\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faHeartbeat, faSpinner} from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faHeartbeat, faSpinner);\n\n\n\n\n\n\nclass App extends Component {\n\n\n  constructor() {\n    super();\n    this.state = {\n      user: null,\n      phone: \"+15555555555\",\n      lat: null,\n      lng: null\n    };\n\n\n    this.authPhone = this.authPhone.bind(this);\n  }\n   \n\ncomponentDidMount () {\n\n\n    auth.onAuthStateChanged((user) => {\n      if (user) {\n         this.setState({user})\n         console.log('logged in');\n         console.log(user.uid);\n         navigate('/home');\n      } else{\n        console.log('logged out');\n        navigate('/');\n      }\n  });\n  \n\n\n\n  auth.setPersistence(Firebase.auth.Auth.Persistence.NONE)\n  .then(function() {\n    // Existing and future Auth states are now persisted in the current\n    // session only. Closing the window would clear any existing state even\n    // if a user forgets to sign out.\n    // ...\n    // New sign-in will be persisted with session persistence.\n    //return Firebase.auth().signInWithEmailAndPassword(email, password);\n  })\n  .catch(function(error) {\n    // Handle Errors here.\n    var errorCode = error.code;\n    var errorMessage = error.message;\n  });\n  \n}\n\n\n\nauthPhone() {\n    const phoneNumber = this.state.phone;\n    const appVerifier = window.recaptchaVerifier;\n    Firebase\n    .auth()\n    .signInWithPhoneNumber(phoneNumber, appVerifier)\n    .then(confirmResult => {\n      console.log(\"success\");\n      console.log(confirmResult);\n      // success\n\n        //var code = getCodeFromUserInput();\n        var code = \"123463\";\n        confirmResult.confirm(code).then(function (result) {\n          // User signed in successfully.\n          var user = result.user;\n          console.log(user);\n          // ...\n        }).catch(function (error) {\n          // User couldn't sign in (bad verification code?)\n          // ...\n          console.log(error);\n        });\n    })\n    .catch(error => {\n      // error\n      console.log('nope error');\n      console.log(error);\n    });\n}\n\nauthAnon() { \nFirebase.auth().signInAnonymously().catch(function(error) {\n  // Handle Errors here.\n  var errorCode = error.code;\n  var errorMessage = error.message;\n  // ...\n});\n};\n\n\n\n  writeUserData = (userId, name, email, imageUrl) =>{\n    Firebase.database().ref('users/' + userId).set({\n      username: name,\n      email: email,\n      profile_picture : imageUrl\n    });\n  };\n\n  addMeeting = meetingName => {\n    const ref = Firebase\n      .database()\n      .ref(`meetings/${this.state.user.uid}`);\n    ref.push({ meetingName: meetingName });\n  };\n\n  \n\n\n  render(){\n\n\n  return (\n\n\n<div>\n<Router>\n  <Login path='/' authAnon={this.authAnon} />\n  <Home path='/home' />\n</Router>\n\n<button className=\"btn btn-primary\" onClick={this.getLocation()}>Get Location</button>\n\n\n</div>\n  );\n}\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}